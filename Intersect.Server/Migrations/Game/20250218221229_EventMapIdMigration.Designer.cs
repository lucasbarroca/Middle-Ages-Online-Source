// <auto-generated />
using System;
using Intersect.Server.Database.GameData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intersect.Server.Migrations.Game
{
    [DbContext(typeof(GameContext))]
    [Migration("20250218221229_EventMapIdMigration")]
    partial class EventMapIdMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrightnessThreshold");

                    b.Property<bool>("CompleteSound");

                    b.Property<string>("Folder");

                    b.Property<string>("Name");

                    b.Property<string>("Sound");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("Animations");
                });

            modelBuilder.Entity("Intersect.GameObjects.ChallengeDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BonusEffectsJson")
                        .HasColumnName("BonusEffects");

                    b.Property<Guid>("ChallengeParamId");

                    b.Property<int>("ChallengeParamType");

                    b.Property<Guid>("CompletionEventId");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<Guid>("EnhancementUnlockId");

                    b.Property<string>("EventDescription");

                    b.Property<string>("Folder");

                    b.Property<string>("Icon");

                    b.Property<string>("JsonRequirements")
                        .HasColumnName("ContractRequirements");

                    b.Property<int>("MinTier");

                    b.Property<string>("Name");

                    b.Property<int>("Param");

                    b.Property<int>("Reps");

                    b.Property<string>("RequirementsString");

                    b.Property<bool>("RequiresContract");

                    b.Property<int>("Sets");

                    b.Property<Guid>("SpellUnlockId");

                    b.Property<string>("StatBoostsJson")
                        .HasColumnName("StatBoosts");

                    b.Property<long>("TimeCreated");

                    b.Property<int>("Type");

                    b.Property<string>("VitalBoostsJson")
                        .HasColumnName("VitalBoosts");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttackAnimationId")
                        .HasColumnName("AttackAnimation");

                    b.Property<int>("AttackSpeedModifier");

                    b.Property<int>("AttackSpeedValue");

                    b.Property<long>("BaseExp");

                    b.Property<int>("BasePoints");

                    b.Property<int>("CritChance");

                    b.Property<double>("CritMultiplier");

                    b.Property<int>("Damage");

                    b.Property<int>("DamageType");

                    b.Property<long>("ExpIncrease");

                    b.Property<string>("ExpOverridesJson")
                        .HasColumnName("ExperienceOverrides");

                    b.Property<string>("Folder");

                    b.Property<bool>("IncreasePercentage");

                    b.Property<int>("InitialSkillPoints");

                    b.Property<string>("JsonBaseStats")
                        .HasColumnName("BaseStats");

                    b.Property<string>("JsonBaseVitals")
                        .HasColumnName("BaseVitals");

                    b.Property<string>("JsonItems")
                        .HasColumnName("Items");

                    b.Property<string>("JsonSpells")
                        .HasColumnName("Spells");

                    b.Property<string>("JsonSprites")
                        .HasColumnName("Sprites");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<int>("PointIncrease");

                    b.Property<string>("RegenJson")
                        .HasColumnName("VitalRegen");

                    b.Property<int>("Scaling");

                    b.Property<int>("ScalingStat");

                    b.Property<int>("SkillPointLevelModulo");

                    b.Property<int>("SkillPointsPerLevel");

                    b.Property<int>("SpawnDir");

                    b.Property<Guid>("SpawnMapId")
                        .HasColumnName("SpawnMap");

                    b.Property<int>("SpawnX");

                    b.Property<int>("SpawnY");

                    b.Property<string>("StatIncreaseJson")
                        .HasColumnName("StatIncreases");

                    b.Property<long>("TimeCreated");

                    b.Property<string>("VitalIncreaseJson")
                        .HasColumnName("VitalIncreases");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CraftAllDisabled");

                    b.Property<Guid>("EventId")
                        .HasColumnName("Event");

                    b.Property<bool>("EventOnly");

                    b.Property<long>("Experience");

                    b.Property<string>("Folder");

                    b.Property<string>("IngredientsJson")
                        .HasColumnName("Ingredients");

                    b.Property<Guid>("ItemId");

                    b.Property<string>("JsonRequirements")
                        .HasColumnName("Requirements");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("Recipe");

                    b.Property<int>("Time");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("Crafts");
                });

            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CraftsJson")
                        .HasColumnName("Crafts");

                    b.Property<string>("Folder");

                    b.Property<string>("Name");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("CraftingTables");
                });

            modelBuilder.Entity("Intersect.GameObjects.DungeonDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplyStatCeiling");

                    b.Property<Guid>("CompletionCounterId");

                    b.Property<string>("DisplayName");

                    b.Property<string>("ExpRewardsJson")
                        .HasColumnName("ExpRewards");

                    b.Property<string>("Folder");

                    b.Property<int>("GnomeLocations");

                    b.Property<string>("GnomeTreasureJson")
                        .HasColumnName("GnomeTreasure");

                    b.Property<bool>("IgnoreCompletionEvents");

                    b.Property<bool>("IgnoreStartEvents");

                    b.Property<string>("Name");

                    b.Property<int>("StatCeilingTier");

                    b.Property<bool>("StoreLongestTime");

                    b.Property<long>("TimeCreated");

                    b.Property<string>("TimeRequirementsJson")
                        .HasColumnName("TimeRequirements");

                    b.Property<Guid>("TimerId");

                    b.Property<string>("TreasureJson")
                        .HasColumnName("Treasure");

                    b.HasKey("Id");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("Intersect.GameObjects.EnhancementDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EffectModsJson")
                        .HasColumnName("EffectMods");

                    b.Property<string>("EnhancementGroup");

                    b.Property<string>("Folder");

                    b.Property<int>("MinimumWeaponLevel");

                    b.Property<string>("Name");

                    b.Property<string>("PrerequisiteEnhancementsJson")
                        .HasColumnName("PrerequisiteEnhancements");

                    b.Property<int>("RequiredEnhancementPoints");

                    b.Property<string>("SpellEnhancementsJson")
                        .HasColumnName("SpellEnhancements");

                    b.Property<string>("StatModsJson")
                        .HasColumnName("StatMods");

                    b.Property<long>("TimeCreated");

                    b.Property<string>("ValidWeaponTypesJson")
                        .HasColumnName("ValidWeaponTypes");

                    b.Property<string>("VitalModsJson")
                        .HasColumnName("VitalMods");

                    b.HasKey("Id");

                    b.ToTable("Enhancements");
                });

            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanRunInParallel");

                    b.Property<bool>("CommonEvent");

                    b.Property<string>("Folder");

                    b.Property<bool>("Global");

                    b.Property<Guid>("MapId");

                    b.Property<string>("Name");

                    b.Property<string>("PagesJson")
                        .HasColumnName("Pages");

                    b.Property<int>("SpawnX");

                    b.Property<int>("SpawnY");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Intersect.GameObjects.InstanceVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Folder");

                    b.Property<string>("Json")
                        .HasColumnName("DefaultValue");

                    b.Property<string>("Name");

                    b.Property<string>("TextId");

                    b.Property<long>("TimeCreated");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("InstanceVariables");
                });

            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AmmoOverrideId");

                    b.Property<Guid>("AnimationId")
                        .HasColumnName("Animation");

                    b.Property<Guid>("AttackAnimationId")
                        .HasColumnName("AttackAnimation");

                    b.Property<int>("AttackSpeedModifier");

                    b.Property<int>("AttackSpeedValue");

                    b.Property<string>("AttackTypesJson")
                        .HasColumnName("AttackTypes");

                    b.Property<float>("BackstabMultiplier");

                    b.Property<int>("BackstepBonus");

                    b.Property<bool>("CanBackstab");

                    b.Property<bool>("CanBag");

                    b.Property<bool>("CanBank");

                    b.Property<bool>("CanDestroy");

                    b.Property<bool>("CanDrop")
                        .HasColumnName("Bound");

                    b.Property<bool>("CanGuildBank");

                    b.Property<bool>("CanSell");

                    b.Property<bool>("CanTrade");

                    b.Property<string>("CannotDestroyMessage");

                    b.Property<string>("CannotUseMessage");

                    b.Property<bool>("ClanWarConsumable");

                    b.Property<int>("ComboExpBoost")
                        .HasColumnName("ComboExpBoost");

                    b.Property<int>("ComboInterval")
                        .HasColumnName("ComboInterval");

                    b.Property<Guid>("ComboSpellId")
                        .HasColumnName("ComboSpell");

                    b.Property<int>("Cooldown");

                    b.Property<string>("CooldownGroup");

                    b.Property<string>("CosmeticDisplayName");

                    b.Property<long>("CraftWeaponExp");

                    b.Property<int>("CritChance");

                    b.Property<double>("CritMultiplier");

                    b.Property<int>("Damage");

                    b.Property<int>("DamageType");

                    b.Property<string>("Description");

                    b.Property<bool>("DestroyOnInstanceChange");

                    b.Property<int>("DropChanceOnDeath");

                    b.Property<string>("EffectsJson")
                        .HasColumnName("Effects");

                    b.Property<Guid>("EnhancementId")
                        .HasColumnName("Enhancement");

                    b.Property<int>("EnhancementThreshold");

                    b.Property<Guid>("EquipmentAnimationId")
                        .HasColumnName("EquipmentAnimation");

                    b.Property<int>("EquipmentSlot");

                    b.Property<Guid>("EventId")
                        .HasColumnName("Event");

                    b.Property<string>("FemalePaperdoll");

                    b.Property<string>("Folder");

                    b.Property<int>("Fuel");

                    b.Property<int>("FuelRequired");

                    b.Property<string>("GnomeTreasureJson")
                        .HasColumnName("DeconstructRolls");

                    b.Property<bool>("HideBeard");

                    b.Property<bool>("HideExtra");

                    b.Property<bool>("HideHair");

                    b.Property<string>("Hint");

                    b.Property<string>("Icon");

                    b.Property<bool>("IgnoreCooldownReduction");

                    b.Property<bool>("IgnoreGlobalCooldown");

                    b.Property<int>("ItemType");

                    b.Property<string>("JsonColor")
                        .HasColumnName("Color");

                    b.Property<string>("JsonDestroyRequirements")
                        .HasColumnName("DestroyRequirements");

                    b.Property<string>("JsonUsageRequirements")
                        .HasColumnName("UsageRequirements");

                    b.Property<string>("MalePaperdoll");

                    b.Property<int>("MaxBankStack");

                    b.Property<int>("MaxInventoryStack");

                    b.Property<string>("MaxWeaponLevelsJson")
                        .HasColumnName("MaxWeaponLevels");

                    b.Property<bool>("MeleeConsumable");

                    b.Property<string>("Name");

                    b.Property<string>("PercentageStatsJson")
                        .HasColumnName("PercentageStatsGiven");

                    b.Property<string>("PercentageVitalsJson")
                        .HasColumnName("PercentageVitalsGiven");

                    b.Property<int>("Price");

                    b.Property<float>("ProcChance");

                    b.Property<Guid>("ProcSpellId");

                    b.Property<Guid>("ProjectileId")
                        .HasColumnName("Projectile");

                    b.Property<bool>("QuickCast");

                    b.Property<bool>("RareDrop");

                    b.Property<int>("Rarity");

                    b.Property<bool>("ReplaceCastingComponents");

                    b.Property<int>("Scaling");

                    b.Property<int>("ScalingStat");

                    b.Property<bool>("ShortHair");

                    b.Property<bool>("SingleUse")
                        .HasColumnName("DestroySpell");

                    b.Property<int>("SkillPoints");

                    b.Property<int>("SlotCount");

                    b.Property<string>("SortName");

                    b.Property<int>("Speed");

                    b.Property<Guid>("SpellId")
                        .HasColumnName("Spell");

                    b.Property<bool>("Stackable");

                    b.Property<int>("StatGrowth");

                    b.Property<string>("StatLockJson")
                        .HasColumnName("StatLocks");

                    b.Property<string>("StatsJson")
                        .HasColumnName("StatsGiven");

                    b.Property<int>("StrafeBonus");

                    b.Property<double>("StudyChance");

                    b.Property<Guid>("StudyEnhancement");

                    b.Property<string>("TagsJson")
                        .HasColumnName("Tags");

                    b.Property<long>("TimeCreated");

                    b.Property<int>("Tool");

                    b.Property<bool>("TwoHanded");

                    b.Property<string>("TypeDisplayOverride");

                    b.Property<string>("VitalsJson")
                        .HasColumnName("VitalsGiven");

                    b.Property<string>("VitalsRegenJson")
                        .HasColumnName("VitalsRegen");

                    b.Property<string>("WeaponTypesJson")
                        .HasColumnName("WeaponTypes");

                    b.Property<string>("WeaponUpgradesJson")
                        .HasColumnName("WeaponUpgrades");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Intersect.GameObjects.LabelDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Folder");

                    b.Property<string>("Hint");

                    b.Property<string>("JsonColor")
                        .HasColumnName("Color");

                    b.Property<bool>("MatchNameColor");

                    b.Property<string>("Name");

                    b.Property<int>("Position");

                    b.Property<bool>("ShowOnlyUnlocked");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Intersect.GameObjects.LootTableDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<string>("DropConditionsJson")
                        .HasColumnName("DropConditions");

                    b.Property<string>("Folder");

                    b.Property<string>("JsonDrops")
                        .HasColumnName("Drops");

                    b.Property<string>("Name");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("LootTables");
                });

            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JsonData")
                        .HasColumnName("JsonData");

                    b.HasKey("Id");

                    b.ToTable("MapFolders");
                });

            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Aggressive");

                    b.Property<bool>("AnimatedSprite");

                    b.Property<bool>("AttackAllies");

                    b.Property<Guid>("AttackAnimationId")
                        .HasColumnName("AttackAnimation");

                    b.Property<string>("AttackOnSightConditionsJson")
                        .HasColumnName("AttackOnSightConditions");

                    b.Property<int>("AttackSpeedModifier");

                    b.Property<int>("AttackSpeedValue");

                    b.Property<string>("AttackTypesJson")
                        .HasColumnName("AttackTypes");

                    b.Property<string>("BestiaryUnlocksJson")
                        .HasColumnName("BestiaryUnlocks");

                    b.Property<bool>("CannotBeHealed");

                    b.Property<long>("ChampionCooldownSeconds");

                    b.Property<Guid>("ChampionId");

                    b.Property<float>("ChampionSpawnChance");

                    b.Property<string>("CraftsJson")
                        .HasColumnName("Spells");

                    b.Property<int>("CritChance");

                    b.Property<double>("CritMultiplier");

                    b.Property<int>("Damage");

                    b.Property<int>("DamageType");

                    b.Property<Guid>("DeathAnimationId")
                        .HasColumnName("DeathAnimation");

                    b.Property<Guid>("DeathTransformId")
                        .HasColumnName("DeathTransformId");

                    b.Property<string>("Description");

                    b.Property<bool>("DisableAutoAttack");

                    b.Property<bool>("DisableAutoExhaustion");

                    b.Property<long>("Experience");

                    b.Property<byte>("FleeHealthPercentage");

                    b.Property<bool>("FocusHighestDamageDealer");

                    b.Property<string>("Folder");

                    b.Property<bool>("HideName");

                    b.Property<string>("ImmunitiesJson")
                        .HasColumnName("Immunities");

                    b.Property<bool>("Impassable");

                    b.Property<bool>("IndividualizedLoot");

                    b.Property<bool>("InvalidForChallenges");

                    b.Property<bool>("IsChampion");

                    b.Property<bool>("IsSpellcaster");

                    b.Property<string>("JsonAggroList")
                        .HasColumnName("AggroList");

                    b.Property<string>("JsonColor")
                        .HasColumnName("Color");

                    b.Property<string>("JsonDrops")
                        .HasColumnName("Drops");

                    b.Property<string>("JsonMaxVital")
                        .HasColumnName("MaxVital");

                    b.Property<string>("JsonSecondaryDrops")
                        .HasColumnName("SecondaryDrops");

                    b.Property<string>("JsonStat")
                        .HasColumnName("Stats");

                    b.Property<string>("JsonTertiaryDrops")
                        .HasColumnName("TertiaryDrops");

                    b.Property<int>("Level");

                    b.Property<int>("MaxScaledTo");

                    b.Property<int>("MeleeLifesteal");

                    b.Property<int>("MeleeManasteal");

                    b.Property<byte>("Movement");

                    b.Property<string>("Name");

                    b.Property<bool>("NeverSkipSpellCasting");

                    b.Property<bool>("NoBackstab");

                    b.Property<bool>("NoStealthBonus");

                    b.Property<bool>("NotInBestiary");

                    b.Property<int>("NpcScaleType");

                    b.Property<bool>("NpcVsNpcEnabled");

                    b.Property<Guid>("OnDeathEventId")
                        .HasColumnName("OnDeathEvent");

                    b.Property<Guid>("OnDeathPartyEventId")
                        .HasColumnName("OnDeathPartyEvent");

                    b.Property<string>("PlayerCanAttackConditionsJson")
                        .HasColumnName("PlayerCanAttackConditions");

                    b.Property<string>("PlayerFriendConditionsJson")
                        .HasColumnName("PlayerFriendConditions");

                    b.Property<bool>("PlayerLockedLoot");

                    b.Property<string>("RegenJson")
                        .HasColumnName("VitalRegen");

                    b.Property<int>("ResetRadius");

                    b.Property<int>("ScaledTo");

                    b.Property<int>("Scaling");

                    b.Property<int>("ScalingStat");

                    b.Property<double>("SecondaryChance");

                    b.Property<bool>("SequentialCasting");

                    b.Property<int>("SightRange");

                    b.Property<int>("SpawnDuration");

                    b.Property<Guid>("SpellAttackOverrideId");

                    b.Property<int>("SpellFrequency");

                    b.Property<string>("Sprite");

                    b.Property<bool>("StandStill");

                    b.Property<bool>("Swarm");

                    b.Property<double>("Tenacity");

                    b.Property<double>("TertiaryChance");

                    b.Property<long>("TimeCreated");

                    b.Property<float>("VitalScaleModifier");

                    b.Property<bool>("VulnerableOnlyWhenExhausted");

                    b.HasKey("Id");

                    b.ToTable("Npcs");
                });

            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Folder");

                    b.Property<string>("Name");

                    b.Property<bool>("RecordLow");

                    b.Property<bool>("RecordSilently");

                    b.Property<bool>("Recordable");

                    b.Property<bool>("SoloRecordOnly");

                    b.Property<string>("TextId");

                    b.Property<long>("TimeCreated");

                    b.Property<byte>("Type");

                    b.Property<string>("VariableGroup");

                    b.HasKey("Id");

                    b.ToTable("PlayerVariables");
                });

            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AmmoDrop");

                    b.Property<Guid>("AmmoItemId")
                        .HasColumnName("Ammo");

                    b.Property<int>("AmmoRequired");

                    b.Property<string>("AnimationsJson")
                        .HasColumnName("Animations");

                    b.Property<bool>("AttachToEntities");

                    b.Property<int>("Delay");

                    b.Property<bool>("FakeMelee");

                    b.Property<string>("Folder");

                    b.Property<bool>("GrappleHook");

                    b.Property<bool>("Grounded");

                    b.Property<bool>("IgnoreActiveResources");

                    b.Property<bool>("IgnoreExhaustedResources");

                    b.Property<bool>("IgnoreMapBlocks");

                    b.Property<bool>("IgnoreZDimension");

                    b.Property<int>("Knockback");

                    b.Property<string>("Name");

                    b.Property<bool>("PierceTarget");

                    b.Property<Guid>("ProjectileDeathAnimation");

                    b.Property<int>("Quantity");

                    b.Property<int>("Range");

                    b.Property<string>("SpawnsJson")
                        .HasColumnName("SpawnLocations");

                    b.Property<int>("Speed");

                    b.Property<Guid>("SpellId")
                        .HasColumnName("Spell");

                    b.Property<long>("TimeCreated");

                    b.Property<int>("Tool");

                    b.Property<bool>("UseAmmoOverride");

                    b.Property<bool>("UseNewClientAlignment");

                    b.HasKey("Id");

                    b.ToTable("Projectiles");
                });

            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeforeDescription");

                    b.Property<string>("CompletedCategory");

                    b.Property<bool>("DoNotShowUnlessRequirementsMet");

                    b.Property<string>("EndDescription");

                    b.Property<Guid>("EndEventId")
                        .HasColumnName("EndEvent");

                    b.Property<string>("Folder");

                    b.Property<string>("InProgressCategory");

                    b.Property<string>("InProgressDescription");

                    b.Property<string>("JsonRequirements")
                        .HasColumnName("Requirements");

                    b.Property<bool>("LogAfterComplete");

                    b.Property<bool>("LogBeforeOffer");

                    b.Property<string>("Name");

                    b.Property<int>("OrderValue");

                    b.Property<int>("QuestClassRank");

                    b.Property<int>("QuestType");

                    b.Property<bool>("Quitable");

                    b.Property<Guid>("RelatedClassId");

                    b.Property<bool>("Repeatable");

                    b.Property<string>("StartDescription");

                    b.Property<Guid>("StartEventId")
                        .HasColumnName("StartEvent");

                    b.Property<string>("TasksJson")
                        .HasColumnName("Tasks");

                    b.Property<long>("TimeCreated");

                    b.Property<string>("UnstartedCategory");

                    b.HasKey("Id");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Intersect.GameObjects.QuestBoard.QuestBoardBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Folder");

                    b.Property<string>("Name");

                    b.Property<string>("QuestListsJson")
                        .HasColumnName("QuestLists");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("QuestBoards");
                });

            modelBuilder.Entity("Intersect.GameObjects.QuestList.QuestListBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Folder");

                    b.Property<string>("JsonRequirements")
                        .HasColumnName("Requirements");

                    b.Property<string>("Name");

                    b.Property<string>("QuestsJson")
                        .HasColumnName("Quests");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("QuestLists");
                });

            modelBuilder.Entity("Intersect.GameObjects.RecipeDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CraftTypeValue")
                        .HasColumnName("CraftType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Folder");

                    b.Property<bool>("HiddenUntilUnlocked");

                    b.Property<string>("Hint");

                    b.Property<string>("Image");

                    b.Property<string>("JsonRequirements")
                        .HasColumnName("Requirements");

                    b.Property<int>("MinClassRank");

                    b.Property<string>("Name");

                    b.Property<long>("TimeCreated");

                    b.Property<Guid>("TriggerParam");

                    b.Property<int>("TriggerValue")
                        .HasColumnName("Trigger");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Intersect.GameObjects.RecipeRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<bool>("BoolValue");

                    b.Property<Guid>("DescriptorId");

                    b.Property<string>("Hint");

                    b.Property<string>("Image");

                    b.Property<bool>("IsBool");

                    b.Property<Guid>("TriggerId");

                    b.Property<int>("TriggerValue")
                        .HasColumnName("Trigger");

                    b.HasKey("Id");

                    b.HasIndex("DescriptorId");

                    b.ToTable("RecipeRequirements");
                });

            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnimationId")
                        .HasColumnName("Animation");

                    b.Property<string>("CannotHarvestMessage");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("DoNotRecord");

                    b.Property<Guid>("EventId")
                        .HasColumnName("Event");

                    b.Property<long>("Experience");

                    b.Property<string>("Folder");

                    b.Property<string>("JsonDrops")
                        .HasColumnName("Drops");

                    b.Property<string>("JsonHarvestingRequirements")
                        .HasColumnName("HarvestingRequirements");

                    b.Property<int>("MaxHp");

                    b.Property<int>("MinHp");

                    b.Property<string>("Name");

                    b.Property<int>("RP");

                    b.Property<string>("ResourceGroup");

                    b.Property<int>("SpawnDuration");

                    b.Property<long>("TimeCreated");

                    b.Property<int>("Tool");

                    b.Property<int>("VitalRegen");

                    b.Property<bool>("WalkableAfter");

                    b.Property<bool>("WalkableBefore");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Folder");

                    b.Property<string>("Json")
                        .HasColumnName("Value");

                    b.Property<string>("Name");

                    b.Property<string>("TextId");

                    b.Property<long>("TimeCreated");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("ServerVariables");
                });

            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("BuyMultiplier");

                    b.Property<string>("BuySound");

                    b.Property<bool>("BuyingWhitelist");

                    b.Property<Guid>("DefaultCurrencyId")
                        .HasColumnName("DefaultCurrency");

                    b.Property<string>("Folder");

                    b.Property<string>("JsonBuyingItems")
                        .HasColumnName("BuyingItems");

                    b.Property<string>("JsonBuyingTags")
                        .HasColumnName("BuyingTags");

                    b.Property<string>("JsonSellingItems")
                        .HasColumnName("SellingItems");

                    b.Property<string>("Name");

                    b.Property<string>("SellSound");

                    b.Property<bool>("TagWhitelist");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BonusEffectsJson")
                        .HasColumnName("BonusEffects");

                    b.Property<bool>("Bound");

                    b.Property<string>("CannotCastMessage");

                    b.Property<Guid>("CastAnimationId")
                        .HasColumnName("CastAnimation");

                    b.Property<int>("CastDuration");

                    b.Property<string>("CastingComponentsJson")
                        .HasColumnName("CastingComponents");

                    b.Property<long>("ChainDelayMs");

                    b.Property<Guid>("ChainSpellId");

                    b.Property<int>("CooldownDuration");

                    b.Property<string>("CooldownGroup");

                    b.Property<string>("DamageOverridesJson")
                        .HasColumnName("DamageOverrides");

                    b.Property<string>("Description");

                    b.Property<Guid>("EventId")
                        .HasColumnName("Event");

                    b.Property<long>("ExhaustionCastTime");

                    b.Property<long>("ExhaustionInterruptTime");

                    b.Property<string>("Folder");

                    b.Property<Guid>("HitAnimationId")
                        .HasColumnName("HitAnimation");

                    b.Property<string>("Icon");

                    b.Property<bool>("IgnoreCooldownReduction");

                    b.Property<bool>("IgnoreGlobalCooldown");

                    b.Property<int>("InterruptThreshold");

                    b.Property<string>("JsonCastRequirements")
                        .HasColumnName("CastRequirements");

                    b.Property<string>("Name");

                    b.Property<Guid>("OverTimeAnimationId")
                        .HasColumnName("OverTimeAnimation");

                    b.Property<int>("RequiredSkillPoints");

                    b.Property<string>("SpellGroup");

                    b.Property<int>("SpellType");

                    b.Property<long>("TimeCreated");

                    b.Property<Guid>("TrapAnimationId")
                        .HasColumnName("TrapAnimation");

                    b.Property<Guid>("UpgradeOfSpellId");

                    b.Property<string>("VitalCostJson")
                        .HasColumnName("VitalCost");

                    b.Property<bool>("WeaponSpell");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Intersect.GameObjects.Switches_and_Variables.GuildVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Folder");

                    b.Property<string>("Name");

                    b.Property<string>("TextId");

                    b.Property<long>("TimeCreated");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("GuildVariables");
                });

            modelBuilder.Entity("Intersect.GameObjects.TerritoryDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CaptureMs");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Folder");

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.Property<int>("PointsPerAttack");

                    b.Property<int>("PointsPerCapture");

                    b.Property<int>("PointsPerDefend");

                    b.Property<int>("PointsPerTick");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("Tilesets");
                });

            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DaylightHuesJson")
                        .HasColumnName("DaylightHues");

                    b.Property<int>("RangeInterval");

                    b.Property<float>("Rate");

                    b.Property<bool>("SyncTime");

                    b.HasKey("Id");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("Intersect.GameObjects.Timers.TimerDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionType");

                    b.Property<int>("ActionVariableChangeValue");

                    b.Property<Guid>("ActionVariableId");

                    b.Property<bool>("ActionsEnabled");

                    b.Property<Guid>("CancellationEventId");

                    b.Property<byte>("CompletionBehavior");

                    b.Property<Guid>("CompletionEventId");

                    b.Property<bool>("ContinueAfterExpiration");

                    b.Property<bool>("ContinueOnDeath");

                    b.Property<bool>("ContinueOnInstanceChange");

                    b.Property<string>("DisplayName");

                    b.Property<Guid>("ElapsedTimeVariableId");

                    b.Property<string>("ExclusiveMapsJson")
                        .HasColumnName("ExclusiveMaps");

                    b.Property<Guid>("ExpirationEventId");

                    b.Property<string>("Folder");

                    b.Property<bool>("Hidden");

                    b.Property<int>("InstanceVariableActionType");

                    b.Property<int>("LogoutBehavior");

                    b.Property<int>("NValue");

                    b.Property<string>("Name");

                    b.Property<bool>("OnlyDisplayOnExclusiveMaps");

                    b.Property<byte>("OwnerType");

                    b.Property<int>("Repetitions");

                    b.Property<bool>("SinglePlayerCancellation");

                    b.Property<bool>("SinglePlayerCompletion");

                    b.Property<bool>("SinglePlayerExpire");

                    b.Property<bool>("StartWithServer");

                    b.Property<long>("TimeCreated");

                    b.Property<long>("TimeLimit");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Timers");
                });

            modelBuilder.Entity("Intersect.GameObjects.WeaponTypeDescriptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<string>("ExpRequirementsJson")
                        .HasColumnName("ExpRequirements");

                    b.Property<string>("Folder");

                    b.Property<int>("MaxLevel");

                    b.Property<string>("Name");

                    b.Property<long>("TimeCreated");

                    b.HasKey("Id");

                    b.ToTable("WeaponTypes");
                });

            modelBuilder.Entity("Intersect.Server.Maps.MapController", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AHue");

                    b.Property<byte[]>("AttributeData")
                        .HasColumnName("Attributes");

                    b.Property<int>("BHue");

                    b.Property<int>("Brightness");

                    b.Property<Guid>("Down");

                    b.Property<string>("EventIdsJson")
                        .HasColumnName("Events");

                    b.Property<string>("Fog");

                    b.Property<int>("FogTransparency");

                    b.Property<int>("FogXSpeed");

                    b.Property<int>("FogYSpeed");

                    b.Property<int>("GHue");

                    b.Property<bool>("IsIndoors");

                    b.Property<Guid>("Left");

                    b.Property<string>("LightsJson")
                        .HasColumnName("Lights");

                    b.Property<Guid>("LoginEventId")
                        .HasColumnName("LoginEvent");

                    b.Property<string>("Music");

                    b.Property<string>("Name");

                    b.Property<string>("NpcSpawnsJson")
                        .HasColumnName("NpcSpawns");

                    b.Property<string>("OverlayGraphic");

                    b.Property<string>("Panorama");

                    b.Property<string>("PlayerLightColorJson")
                        .HasColumnName("PlayerLightColor");

                    b.Property<float>("PlayerLightExpand");

                    b.Property<byte>("PlayerLightIntensity");

                    b.Property<int>("PlayerLightSize");

                    b.Property<int>("RHue");

                    b.Property<int>("RegenType");

                    b.Property<int>("Revision");

                    b.Property<Guid>("Right");

                    b.Property<string>("Sound");

                    b.Property<byte[]>("TileData");

                    b.Property<long>("TimeCreated");

                    b.Property<Guid>("Up");

                    b.Property<Guid>("WeatherAnimationId")
                        .HasColumnName("WeatherAnimation");

                    b.Property<int>("WeatherIntensity");

                    b.Property<int>("WeatherXSpeed");

                    b.Property<int>("WeatherYSpeed");

                    b.Property<int>("ZoneType");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
                        {
                            b1.Property<Guid>("AnimationBaseId");

                            b1.Property<bool>("AlternateRenderLayer");

                            b1.Property<bool>("DisableRotations");

                            b1.Property<int>("FrameCount");

                            b1.Property<int>("FrameSpeed");

                            b1.Property<string>("Light");

                            b1.Property<int>("LoopCount");

                            b1.Property<string>("Sprite");

                            b1.Property<int>("XFrames");

                            b1.Property<int>("YFrames");

                            b1.ToTable("Animations");

                            b1.HasOne("Intersect.GameObjects.AnimationBase")
                                .WithOne("Lower")
                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
                        {
                            b1.Property<Guid>("AnimationBaseId");

                            b1.Property<bool>("AlternateRenderLayer");

                            b1.Property<bool>("DisableRotations");

                            b1.Property<int>("FrameCount");

                            b1.Property<int>("FrameSpeed");

                            b1.Property<string>("Light");

                            b1.Property<int>("LoopCount");

                            b1.Property<string>("Sprite");

                            b1.Property<int>("XFrames");

                            b1.Property<int>("YFrames");

                            b1.ToTable("Animations");

                            b1.HasOne("Intersect.GameObjects.AnimationBase")
                                .WithOne("Upper")
                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
                        {
                            b1.Property<Guid>("ItemBaseId");

                            b1.Property<int>("Percentage");

                            b1.Property<byte>("Type");

                            b1.Property<int>("Value");

                            b1.ToTable("Items");

                            b1.HasOne("Intersect.GameObjects.ItemBase")
                                .WithOne("Consumable")
                                .HasForeignKey("Intersect.GameObjects.ConsumableData", "ItemBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Intersect.GameObjects.SpecialAttackData", "SpecialAttack", b1 =>
                        {
                            b1.Property<Guid>("ItemBaseId");

                            b1.Property<long>("ChargeTime");

                            b1.Property<Guid>("SpellId");

                            b1.ToTable("Items");

                            b1.HasOne("Intersect.GameObjects.ItemBase")
                                .WithOne("SpecialAttack")
                                .HasForeignKey("Intersect.GameObjects.SpecialAttackData", "ItemBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Intersect.GameObjects.RecipeRequirement", b =>
                {
                    b.HasOne("Intersect.GameObjects.RecipeDescriptor", "Recipe")
                        .WithMany("RecipeRequirements")
                        .HasForeignKey("DescriptorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
                        {
                            b1.Property<Guid>("ResourceBaseId");

                            b1.Property<string>("Graphic");

                            b1.Property<bool>("GraphicFromTileset");

                            b1.Property<int>("Height");

                            b1.Property<bool>("RenderBelowEntities");

                            b1.Property<int>("Width");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.ToTable("Resources");

                            b1.HasOne("Intersect.GameObjects.ResourceBase")
                                .WithOne("Exhausted")
                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
                        {
                            b1.Property<Guid>("ResourceBaseId");

                            b1.Property<string>("Graphic");

                            b1.Property<bool>("GraphicFromTileset");

                            b1.Property<int>("Height");

                            b1.Property<bool>("RenderBelowEntities");

                            b1.Property<int>("Width");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.ToTable("Resources");

                            b1.HasOne("Intersect.GameObjects.ResourceBase")
                                .WithOne("Initial")
                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
                        {
                            b1.Property<Guid>("SpellBaseId");

                            b1.Property<int>("AoeRectHeight");

                            b1.Property<int>("AoeRectWidth");

                            b1.Property<bool>("AoeRelativeOffset");

                            b1.Property<int>("AoeShape");

                            b1.Property<int>("AoeTrapIntensity");

                            b1.Property<int>("AoeTrapRadiusOverride");

                            b1.Property<bool>("AoeTrapSpawner");

                            b1.Property<int>("AoeXOffset");

                            b1.Property<int>("AoeYOffset");

                            b1.Property<int>("CastRange");

                            b1.Property<int>("CritChance");

                            b1.Property<double>("CritMultiplier");

                            b1.Property<int>("DamageType");

                            b1.Property<string>("DamageTypesJson")
                                .HasColumnName("AttackTypes");

                            b1.Property<int>("Duration");

                            b1.Property<int>("Effect");

                            b1.Property<bool>("Friendly");

                            b1.Property<int>("HitRadius");

                            b1.Property<bool>("HoTDoT");

                            b1.Property<int>("HotDotInterval");

                            b1.Property<bool>("LifeSteal");

                            b1.Property<bool>("ManaSteal");

                            b1.Property<int>("MinRange");

                            b1.Property<int>("OnHitDuration")
                                .HasColumnName("OnHit");

                            b1.Property<string>("PercentageStatDiffJson")
                                .HasColumnName("PercentageStatDiff");

                            b1.Property<bool>("PersistMissedAttack");

                            b1.Property<bool>("PersistWeaponSwap");

                            b1.Property<Guid>("ProjectileId")
                                .HasColumnName("Projectile");

                            b1.Property<int>("Scaling");

                            b1.Property<int>("ScalingStat");

                            b1.Property<string>("StatDiffJson")
                                .HasColumnName("StatDiff");

                            b1.Property<int>("TargetType");

                            b1.Property<string>("TransformSprite");

                            b1.Property<long>("TrapDamageCooldown");

                            b1.Property<int>("TrapDuration")
                                .HasColumnName("Trap");

                            b1.Property<bool>("TrapMultiUse")
                                .HasColumnName("Combat_TrapSingleUse");

                            b1.Property<string>("VitalDiffJson")
                                .HasColumnName("VitalDiff");

                            b1.ToTable("Spells");

                            b1.HasOne("Intersect.GameObjects.SpellBase")
                                .WithOne("Combat")
                                .HasForeignKey("Intersect.GameObjects.SpellCombatData", "SpellBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
                        {
                            b1.Property<Guid>("SpellBaseId");

                            b1.Property<Guid>("DashAnimationId")
                                .HasColumnName("DashAnimation");

                            b1.Property<bool>("IgnoreActiveResources");

                            b1.Property<bool>("IgnoreEntites");

                            b1.Property<bool>("IgnoreInactiveResources");

                            b1.Property<bool>("IgnoreMapBlocks");

                            b1.Property<bool>("IgnoreZDimensionAttributes");

                            b1.Property<Guid>("SpellId");

                            b1.ToTable("Spells");

                            b1.HasOne("Intersect.GameObjects.SpellBase")
                                .WithOne("Dash")
                                .HasForeignKey("Intersect.GameObjects.SpellDashOpts", "SpellBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
                        {
                            b1.Property<Guid>("SpellBaseId");

                            b1.Property<int>("Dir");

                            b1.Property<Guid>("MapId");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.ToTable("Spells");

                            b1.HasOne("Intersect.GameObjects.SpellBase")
                                .WithOne("Warp")
                                .HasForeignKey("Intersect.GameObjects.SpellWarpData", "SpellBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
